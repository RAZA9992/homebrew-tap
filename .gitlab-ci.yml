# Define stages that will be executed in the CI/CD pipeline
stages:
  - build
  - release

# Define variables for reuse
variables:
  # Define the name of the binary produced by the build process
  BINARY_NAME: "helloworld"

# Define the build job
build:
  stage: build
  image: 
    name: golang:latest  # Use the official Golang Docker image
    entrypoint: [""]
  before_script:
    - apt-get update -qy
    - apt-get install git -y
  script:
    # Fetch dependencies
    - go mod download
    # Build the Go application
    - go build -o $BINARY_NAME ./cmd/server/main.go 
  artifacts:
    paths:
      - $BINARY_NAME
    expire_in: 1 week  # Define how long the artifacts should be kept

# Define the release job
release:
  stage: release
  image:
    name: goreleaser/goreleaser-cross:v1.21.5
    entrypoint: [""]
  services:
    - name: docker:dind
      alias: docker
  dependencies:
    - build
  only:
    - tags
  script:
    # Run goreleaser for releasing the binary
    - goreleaser release --clean

# Define the manual init-release job to create pre-release tags
init-release:
  stage: release
  image:
    name: alpine/git  # Using a lightweight Git image
    entrypoint: [""]
  before_script:
  - git config --global url.https://gitlab-ci-token:${CI_PAT_TOKEN}@${CI_SERVER_HOST}.insteadOf https://${CI_SERVER_HOST}
  - export GOPRIVATE=${CI_SERVER_HOST}
  script:
  # Configure Git with user email and name
    - git config --global user.email "npm@veracode.com"
    - git config --global user.name "Noushad"
    # Retrieve the previous tag
    - PREVIOUS_TAG=$(git describe --tags --abbrev=0)
    # Extract the version number from the previous tag using sed
    - VERSION=$(echo $PREVIOUS_TAG | sed 's/^v\([0-9]\+\.[0-9]\+\.[0-9]\+\).*$/\1/')
    # Increment the patch version (you can adjust this logic based on your versioning scheme)
    - PATCH_VERSION=$(echo $VERSION | awk -F. '{print $3}')
    - NEW_PATCH_VERSION=$((PATCH_VERSION + 1))
    # Construct the new pre-release tag
    - NEW_TAG=$(echo $VERSION | sed "s/\(.*\)\.\(.*\)\.\(.*\)/\1.\2.$NEW_PATCH_VERSION-pre/")
    # Create the new tag
    - git tag -a "$NEW_TAG" -m "Pre-release version $NEW_TAG"
    # Push the new tag to the repository
    - git push --tags
  only:
    - main  # Execute only on the main branch
  when: manual  # Manual triggering of this job is required

# Define workflow rules
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Execute workflow only for the main branch