# Define stages that will be executed in the CI/CD pipeline
stages:
  - build
  - release

# Define variables for reuse
variables:
  # Define the name of the binary produced by the build process
  BINARY_NAME: "helloworld"

# Define the build job
build:
  stage: build
  image: golang:latest  # Use the official Golang Docker image
  script:
    # Fetch dependencies
    - go mod download
    # Build the Go application
    - go build -o $BINARY_NAME ./cmd/server/main.go 

# Define the release job
release:
  stage: release
  image:
    name: goreleaser/goreleaser-cross:v1.21.5
    entrypoint: [""]
  services:
    - name: docker:dind
      alias: docker
  artifacts:
    paths:
      - out/
  only:
    - tags

  dependencies:
    - build
  script:
    # Run goreleaser for releasing the binary
    - goreleaser release --clean

init-release:
  image: node:latest
  stage: release
  before_script:
    - git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}.insteadOf https://${CI_SERVER_HOST}
    - export GOPRIVATE=${CI_SERVER_HOST}
    - apt-get update && apt-get install -y --no-install-recommends git-core ca-certificates
    - npm install -g semantic-release @semantic-release/git @google/semantic-release-replace-plugin @semantic-release/release-notes-generator @semantic-release/gitlab @semantic-release/changelog @semantic-release/exec
  script:
    - semantic-release --debug
  only:
    - main
  when: manual

workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
