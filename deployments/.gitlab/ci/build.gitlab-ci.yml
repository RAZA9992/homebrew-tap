# Define the build job
build:
  stage: build
  image: 
    name: golang:latest  # Use the official Golang Docker image
    entrypoint: [""]
  script:
    # Fetch dependencies
    # - go mod download
    # Build the Go application
    # - go build -o $BINARY_NAME ./cmd/server/main.go
      - echo "$BINARY_NAME building....."
  artifacts:
    paths:
      - bin/myapp   
  rules:
    - when: always

lint:
  stage: build
  variables: 
    REPORT_FILE: helloworld-code-quality-report.json
  script:
    - export GOFLAGS='-buildvcs=false'
    # golangcli-lint binary will be at $(go env GOPATH)/bin/golangci-lint
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
    # print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - $(go env GOPATH)/bin/golangci-lint run --out-format code-climate --path-prefix static-packager | tee $REPORT_FILE | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    when: always
    reports:
      codequality: '**/$REPORT_FILE'
    paths:
      - '**/$REPORT_FILE'