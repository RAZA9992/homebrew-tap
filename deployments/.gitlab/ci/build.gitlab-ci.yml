# Define the build job
build:
  stage: build
  image: 
    name: golang:latest  # Use the official Golang Docker image
    entrypoint: [""]
  script:
    # Fetch dependencies
    # - go mod download
    # Build the Go application
    # - go build -o $BINARY_NAME ./cmd/server/main.go
      - echo "$BINARY_NAME building....."
  artifacts:
    paths:
      - bin/myapp   
  rules:
    - when: always

lint:
  image: golangci/golangci-lint:$GOLANGCI_LINT_VERSION
  stage: build
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --issues-exit-code 0 --print-issued-lines=false --out-format code-climate:gl-code-quality-report.json,line-number
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json